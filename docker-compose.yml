version: '3.8'

services:
  flask:
    build: .
    container_name: flask_app
    restart: unless-stopped
    env_file: .env
    environment:
      - FLASK_APP=wsgi.py
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./:/app
      - ./logs/flask:/app/logs
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - flask
    networks:
      - app-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - ./redis/data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_worker:
    build: .
    container_name: celery_worker
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info
    volumes:
      - ./:/app
      - ./logs/celery:/app/logs
    env_file: .env
    depends_on:
      - redis
      - flask
    networks:
      - app-network

  celery_beat:
    build: .
    container_name: celery_beat
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info
    volumes:
      - ./:/app
      - ./logs/celery:/app/logs
    env_file: .env
    depends_on:
      - redis
      - flask
      - celery_worker
    networks:
      - app-network

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    ports:
      - "9443:9443"  # HTTPS port
      - "9000:9000"  # HTTP port (optional, can be removed for production)
    networks:
      - app-network

volumes:
  uploads:
  processed:
  downloads:
  redis-data:
  portainer_data:  # Add volume for Portainer data
  certbot-conf:
  certbot-www:

networks:
  app-network:
    driver: bridge 